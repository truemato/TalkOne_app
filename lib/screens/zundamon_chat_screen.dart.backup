import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'dart:async';
import 'dart:io' show Platform;
import '../services/zundamon_chat_service.dart';
import 'home_screen.dart';
import 'gemini_debug_chat_screen.dart';

class ZundamonChatScreen extends StatefulWidget {
  const ZundamonChatScreen({super.key});

  @override
  State<ZundamonChatScreen> createState() => _ZundamonChatScreenState();
}

class _ZundamonChatScreenState extends State<ZundamonChatScreen>
    with TickerProviderStateMixin {
  late AnimationController _pulseController;
  late Animation<double> _pulseAnimation;
  late AnimationController _listeningController;
  late Animation<double> _listeningAnimation;
  
  final ZundamonChatService _zundamonService = ZundamonChatService();
  
  // UI状態
  bool _isListening = false;
  bool _isInitialized = false;
  String _userSpeechText = '';
  String _aiResponseText = 'こんにちは！ずんだもんです。何かお話ししましょう！';
  String _errorMessage = '';
  // bool _useFlashLive = false; // Gemini 2.0 Flash Liveモード（削除）
  
  // タイマー関連
  int _remainingSeconds = 180; // 3分 = 180秒
  Timer? _timer;
  bool _chatEnded = false;
  DateTime? _chatStartTime;

  @override
  void initState() {
    super.initState();
    _chatStartTime = DateTime.now();
    _initializeAnimations();
    _initializeZundamonService();
    _startChatTimer();
  }

  @override
  void dispose() {
    _timer?.cancel();
    _pulseController.dispose();
    _listeningController.dispose();
    _zundamonService.dispose();
    super.dispose();
  }

  void _initializeAnimations() {
    _pulseController = AnimationController(
      duration: const Duration(seconds: 2),
      vsync: this,
    )..repeat(reverse: true);

    _pulseAnimation = Tween<double>(
      begin: 1.0,
      end: 1.05,
    ).animate(CurvedAnimation(
      parent: _pulseController,
      curve: Curves.easeInOut,
    ));

    _listeningController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );

    _listeningAnimation = Tween<double>(
      begin: 1.0,
      end: 1.15,
    ).animate(CurvedAnimation(
      parent: _listeningController,
      curve: Curves.easeInOut,
    ));
  }

  Future<void> _initializeZundamonService() async {
    try {
      // コールバック設定
      _zundamonService.onUserSpeech = (text) {
        if (mounted) {
          setState(() {
            _userSpeechText = text;
          });
        }
      };

      _zundamonService.onAIResponse = (text) {
        if (mounted) {
          setState(() {
            _aiResponseText = text;
          });
        }
      };

      _zundamonService.onListeningStateChanged = (isListening) {
        if (mounted) {
          setState(() {
            _isListening = isListening;
          });
          
          if (isListening) {
            _listeningController.repeat(reverse: true);
          } else {
            _listeningController.stop();
            _listeningController.reset();
          }
        }
      };

      _zundamonService.onError = (error) {
        if (mounted) {
          setState(() {
            _errorMessage = error;
          });
        }
      };

      // 初期化
      final success = await _zundamonService.initialize();
      if (success && mounted) {
        setState(() {
          _isInitialized = true;
        });
        // 自動で音声認識開始
        await _zundamonService.startListening();
      } else if (mounted) {
        setState(() {
          _errorMessage = 'ずんだもんの初期化に失敗しました';
        });
      }
    } catch (e) {
      if (mounted) {
        setState(() {
          _errorMessage = '初期化エラー: $e';
        });
      }
    }
  }

  void _startChatTimer() {
    _timer = Timer.periodic(const Duration(seconds: 1), (timer) {
      if (!mounted) {
        timer.cancel();
        return;
      }
      setState(() {
        _remainingSeconds--;
      });
      
      if (_remainingSeconds <= 0) {
        _endChat();
      }
    });
  }

  void _endChat() {
    if (_chatEnded) return;
    
    _chatEnded = true;
    _timer?.cancel();
    _zundamonService.dispose();
    
    if (mounted) {
      Navigator.of(context).pushAndRemoveUntil(
        MaterialPageRoute(builder: (context) => const HomeScreen()),
        (route) => false,
      );
    }
  }

  String _formatTime(int seconds) {
    final minutes = seconds ~/ 60;
    final remainingSeconds = seconds % 60;
    return '$minutes:${remainingSeconds.toString().padLeft(2, '0')}';
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFF81C784), // ずんだもんカラー（薄緑）
      body: Platform.isAndroid 
          ? SafeArea(child: _buildContent())
          : _buildContent(),
    );
  }

  Widget _buildContent() {
    return Center(
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 48),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.spaceEvenly,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            // エラーメッセージ表示
            if (_errorMessage.isNotEmpty) _buildErrorMessage(),
            
            // ずんだもんアイコン
            Center(child: _buildZundamonIcon()),
            
            // 会話内容表示
            Center(child: _buildConversationDisplay()),
            
            // 3分間タイマー
            Center(child: _buildTimer()),
            
            // Flash Liveモード切り替え（削除）
            // Center(child: _buildFlashLiveToggle()),
            
            // 終了ボタン
            Center(child: _buildEndButton()),
            
            // デバッグ用Geminiチャットボタン
            Center(child: _buildDebugChatButton()),
          ],
        ),
      ),
    );
  }

  Widget _buildZundamonIcon() {
    return AnimatedBuilder(
      animation: Listenable.merge([_pulseAnimation, _listeningAnimation]),
      builder: (context, child) {
        final scale = _isListening 
            ? _pulseAnimation.value * _listeningAnimation.value
            : _pulseAnimation.value;
        
        return Transform.scale(
          scale: scale,
          child: Container(
            width: 200,
            height: 200,
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.9),
              shape: BoxShape.circle,
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.1),
                  blurRadius: 20,
                  offset: const Offset(0, 8),
                ),
                // 音声認識中の緑色エフェクト
                if (_isListening)
                  BoxShadow(
                    color: const Color(0xFF4CAF50).withOpacity(0.5),
                    blurRadius: 30,
                    spreadRadius: 10,
                  ),
              ],
            ),
            child: ClipOval(
              child: Container(
                color: const Color(0xFF81C784),
                child: const Icon(
                  Icons.smart_toy,
                  size: 100,
                  color: Colors.white,
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildConversationDisplay() {
    return Container(
      width: double.infinity,
      constraints: const BoxConstraints(maxHeight: 150),
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.9),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 10,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        children: [
          // AI応答
          if (_aiResponseText.isNotEmpty)
            Text(
              'ずんだもん: $_aiResponseText',
              style: GoogleFonts.notoSans(
                fontSize: 14,
                fontWeight: FontWeight.w600,
                color: const Color(0xFF2E7D32),
              ),
              textAlign: TextAlign.center,
            ),
          
          const SizedBox(height: 8),
          
          // ユーザー発言
          if (_userSpeechText.isNotEmpty)
            Text(
              'あなた: $_userSpeechText',
              style: GoogleFonts.notoSans(
                fontSize: 12,
                color: Colors.black54,
              ),
              textAlign: TextAlign.center,
            ),
          
          // 音声認識状態
          if (_isListening && _userSpeechText.isEmpty)
            Text(
              '聞いています...',
              style: GoogleFonts.notoSans(
                fontSize: 12,
                color: Colors.blue,
                fontStyle: FontStyle.italic,
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildTimer() {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 32, vertical: 16),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.9),
        borderRadius: BorderRadius.circular(25),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 10,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Text(
        _formatTime(_remainingSeconds),
        style: GoogleFonts.notoSans(
          fontSize: 32,
          fontWeight: FontWeight.bold,
          color: const Color(0xFF2E7D32),
        ),
      ),
    );
  }

  Widget _buildEndButton() {
    return Container(
      width: 80,
      height: 80,
      decoration: BoxDecoration(
        color: Colors.red,
        shape: BoxShape.circle,
        boxShadow: [
          BoxShadow(
            color: Colors.red.withOpacity(0.3),
            blurRadius: 15,
            offset: const Offset(0, 6),
          ),
        ],
      ),
      child: Material(
        color: Colors.transparent,
        child: InkWell(
          borderRadius: BorderRadius.circular(40),
          onTap: _endChat,
          child: const Icon(
            Icons.close,
            color: Colors.white,
            size: 36,
          ),
        ),
      ),
    );
  }

  Widget _buildErrorMessage() {
    return Container(
      padding: const EdgeInsets.all(16),
      margin: const EdgeInsets.only(bottom: 16),
      decoration: BoxDecoration(
        color: Colors.red.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.red.withOpacity(0.3)),
      ),
      child: Text(
        _errorMessage,
        style: GoogleFonts.notoSans(
          fontSize: 12,
          color: Colors.red[700],
        ),
        textAlign: TextAlign.center,
      ),
    );
  }

  Widget _buildDebugChatButton() {
    return Container(
      margin: const EdgeInsets.only(top: 16),
      child: ElevatedButton.icon(
        onPressed: () {
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => const GeminiDebugChatScreen(),
            ),
          );
        },
        icon: const Icon(Icons.bug_report, color: Colors.white),
        label: const Text(
          'Gemini デバッグチャット',
          style: TextStyle(
            color: Colors.white,
            fontSize: 12,
            fontWeight: FontWeight.w500,
          ),
        ),
        style: ElevatedButton.styleFrom(
          backgroundColor: Colors.orange.withOpacity(0.8),
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(20),
          ),
        ),
      ),
    );
  }

}